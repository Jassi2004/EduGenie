[
  {
    "qId": 1,
    "question": "Which of the following is NOT a primary concern when designing a distributed system for high availability?",
    "optionA": "Fault tolerance",
    "optionB": "Data consistency",
    "optionC": "Data encryption",
    "optionD": "Load balancing",
    "answer": "Data encryption"
  },
  {
    "qId": 2,
    "question": "In a microservices architecture, what is the purpose of a service discovery mechanism?",
    "optionA": "To ensure that all services are running on the same server",
    "optionB": "To allow services to dynamically find and connect with each other",
    "optionC": "To manage the deployment and scaling of individual services",
    "optionD": "To monitor the performance of individual services",
    "answer": "To allow services to dynamically find and connect with each other"
  },
  {
    "qId": 3,
    "question": "What is the difference between eventual consistency and strong consistency in distributed systems?",
    "optionA": "Eventual consistency ensures that all nodes have the same data at all times, while strong consistency only guarantees eventual data consistency",
    "optionB": "Strong consistency ensures that all nodes have the same data at all times, while eventual consistency only guarantees that data will be consistent eventually",
    "optionC": "Eventual consistency is more efficient than strong consistency, but less reliable",
    "optionD": "Strong consistency is more efficient than eventual consistency, but less reliable",
    "answer": "Strong consistency ensures that all nodes have the same data at all times, while eventual consistency only guarantees that data will be consistent eventually"
  },
  {
    "qId": 4,
    "question": "Which of the following is a common technique for handling distributed transactions in a microservices architecture?",
    "optionA": "Two-phase commit",
    "optionB": "Sagas",
    "optionC": "Message queues",
    "optionD": "All of the above",
    "answer": "All of the above"
  },
  {
    "qId": 5,
    "question": "What is the purpose of a circuit breaker pattern in system design?",
    "optionA": "To prevent a single failing service from bringing down the entire system",
    "optionB": "To ensure that all services are running on the same server",
    "optionC": "To manage the deployment and scaling of individual services",
    "optionD": "To monitor the performance of individual services",
    "answer": "To prevent a single failing service from bringing down the entire system"
  }
]